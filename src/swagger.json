{
    "paths": {
        "/api/v1/auth/register": {
            "post": {
                "summary": "Registers a new user account",
                "tags": ["User Authentication"],
                "produces": ["application/json"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegisterSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Conflict": {
                                        "$ref": "#/components/examples/Conflict"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "summary": "Logs in a user account",
                "tags": ["User Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LoginSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "summary": "Logs out a user account",
                "tags": ["User Authentication"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LogoutSuccessResponse200"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/forgot-password": {
            "post": {
                "summary": "Sends an email with a URL to reset password",
                "tags": ["User Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset link sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ForgotPasswordSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "summary": "Resets a user's password",
                "tags": ["User Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ResetPasswordSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or expired/invalid token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User with the given userId not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "summary": "Retrieves a list of all users",
                "tags": ["User Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of users per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "fullName",
                                "-fullName",
                                "createdAt",
                                "-createdAt"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order (e.g., -fullName)."
                    },
                    {
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string",
                            "enum": ["user", "admin", "all"],
                            "default": "all"
                        },
                        "description": "Filter users by their role."
                    },
                    {
                        "in": "query",
                        "name": "level",
                        "schema": {
                            "type": "string",
                            "enum": ["basic", "premium", "all"],
                            "default": "all"
                        },
                        "description": "Filter users by their member level."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{userId}": {
            "get": {
                "summary": "Retrieves a specific user by their ID",
                "tags": ["User Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the user to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific user by their ID",
                "tags": ["User Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the user to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the user data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserSuccessResponse200"
                                },
                                "examples": {
                                    "success": {
                                        "summary": "A successful user update response",
                                        "value": {
                                            "success": true,
                                            "statusCode": 200,
                                            "message": "Successfully updated user data.",
                                            "data": {
                                                "user": {
                                                    "id": 2,
                                                    "email": "janedoe.updated@mail.com",
                                                    "fullName": "Jane Doe Updated",
                                                    "memberLevel": "Premium",
                                                    "role": "User",
                                                    "pictureUrl": "https://example.com/picture.jpg",
                                                    "createdAt": "2025-07-07T08:08:00.080Z",
                                                    "updatedAt": "2025-07-07T09:00:00.000Z"
                                                }
                                            },
                                            "errors": null
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific user by their ID",
                "tags": ["User Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the user to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the user account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{userId}/profilePhotos": {
            "put": {
                "summary": "Uploads or updates a user's profile photo",
                "tags": ["User Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "userId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the user whose profile photo is being uploaded."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "photo": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The image file to upload (JPEG, PNG, WEBP). Max size: 5MB."
                                    }
                                },
                                "required": ["photo"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully uploaded the profile photo.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProfilePhotoUploadSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format or the photo field is empty.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, the user is not an admin or the owner of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User with the given ID was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "The uploaded file is too large (exceeds 5MB).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "PayloadTooLarge": {
                                        "$ref": "#/components/examples/PayloadTooLarge"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The uploaded file format is not supported.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/feedbacks": {
            "get": {
                "summary": "Retrieves a list of all feedbacks",
                "tags": ["Feedback Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of feedbacks per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": ["id", "-id", "createdAt", "-createdAt"],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order (e.g., -createdAt)."
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string",
                            "format": "email"
                        },
                        "description": "Filter feedbacks by email."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of feedbacks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedbackListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Sends a feedback",
                "tags": ["Feedback Management"],
                "produces": ["application/json"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedbackRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Feedback sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedbackSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/feedbacks/{feedbackId}": {
            "get": {
                "summary": "Retrieves a specific feedback by their ID",
                "tags": ["Feedback Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "feedbackId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the feedback to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the feedback data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedbackSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid feedback ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the account.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feedback with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/feedbacks/{feedbackId}/responses": {
            "post": {
                "summary": "Creates a response to a specific feedback",
                "tags": ["Feedback Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "feedbackId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the feedback to respond to."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FeedbackResponseRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created a feedback response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedbackResponseSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid feedback ID format or request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Feedback with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs": {
            "get": {
                "summary": "Retrieves a list of all programs",
                "tags": ["Program Management"],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of programs per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "createdAt",
                                "-createdAt",
                                "price",
                                "-price",
                                "availableDate",
                                "-availableDate"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order (e.g., -price)."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course",
                                "seminar",
                                "workshop",
                                "competition",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter programs by type."
                    },
                    {
                        "in": "query",
                        "name": "price.gte",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        },
                        "description": "Filter programs with a price greater than or equal to the given value."
                    },
                    {
                        "in": "query",
                        "name": "price.lte",
                        "schema": {
                            "type": "integer",
                            "positive": true
                        },
                        "description": "Filter programs with a price less than or equal to the given value."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of programs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProgramCreateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created a program.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramCreateSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs/{programId}": {
            "get": {
                "summary": "Retrieves the details of a specific program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the program to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the program details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramDetailsSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or an enrolled member.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the program to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProgramUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated a program.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramUpdateSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or program ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the program to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted a program.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs/{programId}/thumbnails": {
            "put": {
                "summary": "Uploads or updates a program's thumbnail",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the program whose thumbnail is being uploaded."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "thumbnail": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The image file to upload (JPEG, PNG, WEBP). Max size: 5MB."
                                    }
                                },
                                "required": ["thumbnail"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully uploaded the program thumbnail.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProgramThumbnailUploadSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID format or the thumbnail field is empty.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, the user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "The uploaded file is too large (exceeds 5MB).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "PayloadTooLarge": {
                                        "$ref": "#/components/examples/PayloadTooLarge"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The uploaded file format is not supported.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs/{programId}/modules": {
            "get": {
                "summary": "Retrieves all modules for a specific course program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of modules per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": ["id", "-id", "createdAt", "-createdAt"],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of modules.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID or query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or an enrolled member of the course.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new module for a course program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModuleCreateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created a module.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleCreateSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID or request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found or is not a Course type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs/{programId}/modules/{moduleId}": {
            "get": {
                "summary": "Retrieves a specific module for a course program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    },
                    {
                        "in": "path",
                        "name": "moduleId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the module to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the module details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID or module ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or an enrolled member of the course.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program or Module with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific module for a course program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    },
                    {
                        "in": "path",
                        "name": "moduleId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the module to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModuleUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the module.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleUpdateSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID, module ID, or request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program or Module with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific module from a course program",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    },
                    {
                        "in": "path",
                        "name": "moduleId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the module to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the module.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID or module ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program or Module with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/programs/{programId}/modules/{moduleId}/materials": {
            "put": {
                "summary": "Uploads or updates a module's material",
                "tags": ["Program Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "programId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the course program."
                    },
                    {
                        "in": "path",
                        "name": "moduleId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the module to which the material will be uploaded."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "material": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The material file to upload (e.g., PDF, DOCX, ZIP). Max size: 25MB."
                                    }
                                },
                                "required": ["material"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully uploaded the module material.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": { "type": "boolean" },
                                        "statusCode": { "type": "integer" },
                                        "message": { "type": "string" },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "materialUrl": {
                                                    "type": "string",
                                                    "format": "uri"
                                                }
                                            }
                                        },
                                        "errors": {
                                            "type": "object",
                                            "nullable": true
                                        }
                                    },
                                    "example": {
                                        "success": true,
                                        "statusCode": 201,
                                        "message": "Successfully uploaded a module material.",
                                        "data": {
                                            "materialUrl": "http://localhost:9000/sim-ilc/documents/programs/1-1-material-1760000000000.pdf"
                                        },
                                        "errors": null
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid program ID, module ID, or missing file.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, the user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program or Module with the given ID was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "The uploaded file is too large (exceeds 25MB).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "PayloadTooLarge": {
                                        "$ref": "#/components/examples/PayloadTooLarge"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "The uploaded file format is not supported.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/enrollments": {
            "get": {
                "summary": "Retrieves a list of all program enrollments",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of enrollments per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "createdAt",
                                "-createdAt",
                                "updatedAt",
                                "-updatedAt",
                                "completedAt",
                                "-completedAt",
                                "progress",
                                "-progress"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter enrollments by user ID. Required for non-admin users."
                    },
                    {
                        "in": "query",
                        "name": "programId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter enrollments by program ID."
                    },
                    {
                        "in": "query",
                        "name": "programType",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course",
                                "seminar",
                                "workshop",
                                "competition",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter enrollments by program type."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "unpaid",
                                "in progress",
                                "completed",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter enrollments by status."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of program enrollments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or trying to access other user's enrollment data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new program enrollment for the logged-in user",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnrollmentCreateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created an enrollment. If the program is paid, an invoice is generated, and the user must complete the payment to access the program content. For free programs, enrollment is immediate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentCreateSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Program with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "User is already enrolled in the specified program.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Conflict": {
                                        "$ref": "#/components/examples/Conflict"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. Request must be application/json.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/enrollments/{enrollmentId}": {
            "get": {
                "summary": "Retrieves the details of a specific program enrollment",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "enrollmentId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the enrollment to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved program enrollment details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentDetailsSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid enrollment ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the enrollment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Enrollment with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific program enrollment",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "enrollmentId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the enrollment to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnrollmentUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated program enrollment details. This action is irreversible and sets the program's progress to 100%. Note: This endpoint cannot be used for enrollments in 'Course' type programs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentUpdateSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, enrollment ID, or business logic violation (e.g., trying to update a 'Course', 'Unpaid', or already 'Completed' enrollment).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the enrollment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Enrollment with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. Request must be application/json.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific program enrollment",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "enrollmentId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the enrollment to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted an enrollment. This action is restricted to admins only.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid enrollment ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Enrollment with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/enrollments/{enrollmentId}/completed-modules": {
            "post": {
                "summary": "Marks a course module as completed for an enrollment",
                "tags": ["Enrollment Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "enrollmentId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the enrollment."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompletedModuleRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully marked the module as completed and updated the enrollment progress.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompletedModuleSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, enrollment is not for a 'Course' type, or enrollment is 'Unpaid'.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access, user is not an admin or the owner of the enrollment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Enrollment or Course Module with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "The module has already been completed for this enrollment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Conflict": {
                                        "$ref": "#/components/examples/Conflict"
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type. Request must be application/json.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too many requests.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "TooManyRequests": {
                                        "$ref": "#/components/examples/TooManyRequests"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/invoices": {
            "get": {
                "summary": "Retrieves a list of all invoices",
                "tags": ["Invoice Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of invoices per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "paymentDue",
                                "-paymentDue",
                                "createdAt",
                                "-createdAt",
                                "updatedAt",
                                "-updatedAt"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter invoices by user ID. Required for non-admin users."
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "verified",
                                "unverified",
                                "expired",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter invoices by their payment status."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course",
                                "seminar",
                                "workshop",
                                "competition",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter invoices by the type of program."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of invoices.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. Non-admin users must provide their own `userId` and cannot view others' invoices.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/invoices/{invoiceId}": {
            "get": {
                "summary": "Retrieves the details of a specific invoice",
                "tags": ["Invoice Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "invoiceId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the invoice to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an invoice details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceDetailsSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid invoice ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin or the owner of the invoice.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific invoice by its ID",
                "tags": ["Invoice Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "invoiceId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the invoice to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted an invoice.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid invoice ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/invoices/{invoiceId}/payments": {
            "post": {
                "summary": "Creates a payment for a specific invoice",
                "tags": ["Invoice Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "invoiceId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the invoice for which to create a payment."
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created a payment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid invoice ID format or trying to pay an expired invoice.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin or the owner of the invoice.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict. Payment has already been made for this invoice.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Conflict": {
                                        "$ref": "#/components/examples/Conflict"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/certificates": {
            "get": {
                "summary": "Retrieves a list of all certificates",
                "tags": ["Certificate Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        },
                        "description": "The number of certificates per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "issuedAt",
                                "-issuedAt",
                                "expiredAt",
                                "-expiredAt",
                                "updatedAt",
                                "-updatedAt"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order (e.g., -issuedAt)."
                    },
                    {
                        "in": "query",
                        "name": "userId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter certificates by user ID. Required for non-admin users."
                    },
                    {
                        "in": "query",
                        "name": "programId",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "Filter certificates by program ID."
                    },
                    {
                        "in": "query",
                        "name": "credential",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Filter certificates by a specific credential ID."
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course",
                                "seminar",
                                "workshop",
                                "competition",
                                "all"
                            ],
                            "default": "all"
                        },
                        "description": "Filter certificates by the type of program."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of certificates.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateListSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. Non-admin users must provide their own `userId` and cannot view others' certificates.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new certificate for a completed enrollment",
                "tags": ["Certificate Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificateCreateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created a certificate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateCreateSuccessResponse201"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or business logic violation (e.g., enrollment not completed).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    },
                                    "EnrollmentNotCompleted": {
                                        "summary": "Enrollment Not Completed",
                                        "value": {
                                            "success": false,
                                            "statusCode": 400,
                                            "data": null,
                                            "message": "Validation error.",
                                            "errors": [
                                                {
                                                    "message": "Enrollment \"status\" must be \"Completed\"",
                                                    "context": {
                                                        "key": "status",
                                                        "value": "In Progress"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Enrollment with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "summary": "Enrollment Not Found",
                                        "value": {
                                            "success": false,
                                            "statusCode": 404,
                                            "data": null,
                                            "message": "Resource not found.",
                                            "errors": [
                                                {
                                                    "message": "Enrollment with \"enrollmentId\" does not exist",
                                                    "context": {
                                                        "key": "enrollmentId",
                                                        "value": 9999
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict. An active certificate already exists for this enrollment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Conflict": {
                                        "summary": "Active Certificate Exists",
                                        "value": {
                                            "success": false,
                                            "statusCode": 409,
                                            "data": null,
                                            "message": "Resource conflict.",
                                            "errors": [
                                                {
                                                    "message": "Enrollment with \"enrollmentId\" already has an active certificate",
                                                    "context": {
                                                        "key": "enrollmentId",
                                                        "value": 1
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "502": {
                        "description": "Bad Gateway. An error occurred with an external service (e.g., PDF generation).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadGateway": {
                                        "summary": "External Service Error",
                                        "value": {
                                            "success": false,
                                            "statusCode": 502,
                                            "data": null,
                                            "message": "Bad Gateway.",
                                            "errors": [
                                                {
                                                    "message": "There is an error with external calls",
                                                    "context": {
                                                        "key": "external-service",
                                                        "value": "DocRaptor"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/certificates/{certificateId}": {
            "get": {
                "summary": "Retrieves the details of a specific certificate",
                "tags": ["Certificate Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "certificateId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the certificate to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the certificate details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateDetailsSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid certificate ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin or the owner of the certificate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Certificate with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "$ref": "#/components/examples/NotFound"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific certificate by ID (Admin only)",
                "tags": ["Certificate Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "certificateId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the certificate to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CertificateUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the certificate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateUpdateSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or business logic violation (e.g., expiredAt is before issuedAt).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    },
                                    "InvalidExpiryDate": {
                                        "summary": "Expiry Date Before Issue Date",
                                        "value": {
                                            "success": false,
                                            "statusCode": 400,
                                            "data": null,
                                            "message": "Validation error.",
                                            "errors": [
                                                {
                                                    "message": "Certificate \"expiredAt\" cannot be earlier than \"issuedAt\"",
                                                    "context": {
                                                        "key": "expiredAt",
                                                        "value": "2024-12-31T00:00:00.000Z"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Certificate with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "summary": "Certificate Not Found",
                                        "value": {
                                            "success": false,
                                            "statusCode": 404,
                                            "data": null,
                                            "message": "Resource not found.",
                                            "errors": [
                                                {
                                                    "message": "Certificate with \"certificateId\" does not exist",
                                                    "context": {
                                                        "key": "certificateId",
                                                        "value": 9999
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "415": {
                        "description": "Unsupported media type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "UnsupportedMediaType": {
                                        "$ref": "#/components/examples/UnsupportedMediaType"
                                    }
                                }
                            }
                        }
                    },
                    "502": {
                        "description": "Bad Gateway. An error occurred with an external service (e.g., PDF generation).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadGateway": {
                                        "summary": "External Service Error",
                                        "value": {
                                            "success": false,
                                            "statusCode": 502,
                                            "data": null,
                                            "message": "Bad Gateway.",
                                            "errors": [
                                                {
                                                    "message": "There is an error with external calls",
                                                    "context": {
                                                        "key": "external-service",
                                                        "value": "DocRaptor"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific certificate by its ID (Admin only)",
                "tags": ["Certificate Management"],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "certificateId",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The ID of the certificate to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the certificate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CertificateDeleteSuccessResponse200"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid certificate ID format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "BadRequest": {
                                        "$ref": "#/components/examples/BadRequest"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access, token is missing or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Unauthorized": {
                                        "$ref": "#/components/examples/Unauthorized"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access. User is not an admin.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "Forbidden": {
                                        "$ref": "#/components/examples/Forbidden"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Certificate with the given ID not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "NotFound": {
                                        "summary": "Certificate Not Found",
                                        "value": {
                                            "success": false,
                                            "statusCode": 404,
                                            "data": null,
                                            "message": "Resource not found.",
                                            "errors": [
                                                {
                                                    "message": "Certificate with \"certificateId\" does not exist",
                                                    "context": {
                                                        "key": "certificateId",
                                                        "value": 9999
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "examples": {
                                    "InternalServerError": {
                                        "$ref": "#/components/examples/InternalServerError"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/discussions": {
            "get": {
                "summary": "Retrieves a list of all discussion forums",
                "tags": ["Discussion Management"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "schema": { "type": "integer", "default": 1 },
                        "description": "The page number to retrieve."
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": { "type": "integer", "default": 10 },
                        "description": "The number of discussions per page."
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "createdAt",
                                "-createdAt",
                                "updatedAt",
                                "-updatedAt"
                            ],
                            "default": "id"
                        },
                        "description": "The field to sort by. Use a '-' prefix for descending order."
                    },
                    {
                        "in": "query",
                        "name": "title",
                        "schema": { "type": "string" },
                        "description": "Filter discussions by title (case-insensitive)."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all discussion forums.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionListSuccessResponse200"
                                },
                                "example": {
                                    "success": true,
                                    "statusCode": 200,
                                    "message": "Successfully retrieved all discussion forums.",
                                    "data": {
                                        "discussions": [
                                            {
                                                "id": 1,
                                                "adminUserId": 1,
                                                "title": "General Discussion about Web Development",
                                                "createdAt": "2025-10-16T10:00:00.000Z",
                                                "updatedAt": "2025-10-16T10:00:00.000Z"
                                            },
                                            {
                                                "id": 2,
                                                "adminUserId": 1,
                                                "title": "Frontend Frameworks: React vs Vue",
                                                "createdAt": "2025-10-15T14:30:00.000Z",
                                                "updatedAt": "2025-10-15T14:30:00.000Z"
                                            }
                                        ]
                                    },
                                    "pagination": {
                                        "currentRecords": 2,
                                        "totalRecords": 25,
                                        "currentPage": 1,
                                        "totalPages": 3,
                                        "nextPage": 2,
                                        "prevPage": null
                                    },
                                    "errors": null
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 401,
                                    "message": "Unauthorized.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "Invalid or expired token.",
                                            "context": {
                                                "key": "request.headers.authorization"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new discussion forum (Admin only)",
                "tags": ["Discussion Management"],
                "security": [{ "bearerAuth": [] }],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionCreateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Successfully created a discussion forum.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionCreateSuccessResponse201"
                                },
                                "example": {
                                    "success": true,
                                    "statusCode": 201,
                                    "message": "Successfully created a discussion forum.",
                                    "data": {
                                        "discussion": {
                                            "id": 26,
                                            "title": "New Discussion on DevOps",
                                            "adminUserId": 1,
                                            "updatedAt": "2025-10-16T10:47:00.000Z",
                                            "createdAt": "2025-10-16T10:47:00.000Z"
                                        }
                                    },
                                    "errors": null
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error for request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 400,
                                    "message": "Validation error.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "\"title\" is not allowed to be empty",
                                            "context": {
                                                "key": "title",
                                                "value": ""
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 401,
                                    "message": "Unauthorized.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "Invalid or expired token.",
                                            "context": {
                                                "key": "request.headers.authorization"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden access for non-admin users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 403,
                                    "message": "Forbidden.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "You do not have the necessary permissions to access this resource.",
                                            "context": {
                                                "key": "role",
                                                "value": "User"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/discussions/{discussionId}": {
            "get": {
                "summary": "Retrieves a specific discussion forum by its ID",
                "tags": ["Discussion Management"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discussionId",
                        "required": true,
                        "schema": { "type": "integer" },
                        "description": "The ID of the discussion to retrieve."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved discussion forum details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionSuccessResponse200"
                                },
                                "example": {
                                    "success": true,
                                    "statusCode": 200,
                                    "message": "Successfully retrieved discussion forum details.",
                                    "data": {
                                        "discussion": {
                                            "id": 1,
                                            "adminUserId": 1,
                                            "title": "General Discussion about Web Development",
                                            "createdAt": "2025-10-16T10:00:00.000Z",
                                            "updatedAt": "2025-10-16T10:00:00.000Z"
                                        }
                                    },
                                    "errors": null
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 404,
                                    "message": "Resource not found.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "Discussion with \"discussionId\" does not exist",
                                            "context": {
                                                "key": "discussionId",
                                                "value": 9999
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Updates a specific discussion forum by its ID (Admin only)",
                "tags": ["Discussion Management"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discussionId",
                        "required": true,
                        "schema": { "type": "integer" },
                        "description": "The ID of the discussion to update."
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionUpdateRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated a discussion forum.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionUpdateSuccessResponse200"
                                },
                                "example": {
                                    "success": true,
                                    "statusCode": 200,
                                    "message": "Successfully updated a discussion forum.",
                                    "data": {
                                        "discussion": {
                                            "id": 1,
                                            "title": "Updated: Discussion on Advanced Web Topics",
                                            "createdAt": "2025-10-16T10:00:00.000Z",
                                            "updatedAt": "2025-10-16T10:55:00.000Z"
                                        }
                                    },
                                    "errors": null
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 404,
                                    "message": "Resource not found.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "Discussion with \"discussionId\" does not exist",
                                            "context": {
                                                "key": "discussionId",
                                                "value": 9999
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes a specific discussion forum by its ID (Admin only)",
                "tags": ["Discussion Management"],
                "security": [{ "bearerAuth": [] }],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discussionId",
                        "required": true,
                        "schema": { "type": "integer" },
                        "description": "The ID of the discussion to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted a discussion forum.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionDeleteSuccessResponse200"
                                },
                                "example": {
                                    "success": true,
                                    "statusCode": 200,
                                    "message": "Successfully deleted a discussion forum.",
                                    "data": null,
                                    "errors": null
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FailedResponse"
                                },
                                "example": {
                                    "success": false,
                                    "statusCode": 404,
                                    "message": "Resource not found.",
                                    "data": null,
                                    "errors": [
                                        {
                                            "message": "Discussion with \"discussionId\" does not exist",
                                            "context": {
                                                "key": "discussionId",
                                                "value": 9999
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "memberLevel": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "pictureUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Pagination": {
                "type": "object",
                "properties": {
                    "currentRecords": {
                        "type": "integer"
                    },
                    "totalRecords": {
                        "type": "integer"
                    },
                    "currentPage": {
                        "type": "integer"
                    },
                    "totalPages": {
                        "type": "integer"
                    },
                    "nextPage": {
                        "type": "integer",
                        "nullable": true
                    },
                    "prevPage": {
                        "type": "integer",
                        "nullable": true
                    }
                }
            },
            "Feedback": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FeedbackResponse"
                        }
                    }
                }
            },
            "FeedbackResponse": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "adminUserId": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Program": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "thumbnailUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "availableDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["Course", "Seminar", "Workshop", "Competition"]
                    },
                    "priceIdr": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "ProgramDetails": {
                "allOf": [
                    { "$ref": "#/components/schemas/Program" },
                    {
                        "type": "object",
                        "properties": {
                            "details": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/CourseDetails"
                                    },
                                    {
                                        "$ref": "#/components/schemas/WorkshopDetails"
                                    },
                                    {
                                        "$ref": "#/components/schemas/SeminarDetails"
                                    },
                                    {
                                        "$ref": "#/components/schemas/CompetitionDetails"
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "CourseDetails": {
                "type": "object",
                "properties": {
                    "totalModules": { "type": "integer" }
                }
            },
            "WorkshopDetails": {
                "type": "object",
                "properties": {
                    "isOnline": { "type": "boolean" },
                    "videoConferenceUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "locationAddress": { "type": "string", "nullable": true },
                    "facilitatorNames": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                }
            },
            "SeminarDetails": {
                "type": "object",
                "properties": {
                    "isOnline": { "type": "boolean" },
                    "videoConferenceUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "locationAddress": { "type": "string", "nullable": true },
                    "speakerNames": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                }
            },
            "CompetitionDetails": {
                "type": "object",
                "properties": {
                    "isOnline": { "type": "boolean" },
                    "videoConferenceUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "contestRoomUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "locationAddress": { "type": "string", "nullable": true },
                    "hostName": { "type": "string" },
                    "totalPrize": { "type": "integer" }
                }
            },
            "Module": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer" },
                    "numberCode": { "type": "integer" },
                    "materialUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "youtubeUrl": { "type": "string", "format": "uri" },
                    "createdAt": { "type": "string", "format": "date-time" },
                    "updatedAt": { "type": "string", "format": "date-time" }
                }
            },
            "Enrollment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "programId": {
                        "type": "integer"
                    },
                    "programTitle": {
                        "type": "string"
                    },
                    "programType": {
                        "type": "string"
                    },
                    "programThumbnailUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "progressPercentage": {
                        "type": "number",
                        "format": "decimal"
                    },
                    "status": {
                        "type": "string"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Payment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "invoiceId": {
                        "type": "integer"
                    },
                    "amountPaidIdr": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Invoice": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for the invoice."
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The ID of the user associated with the invoice."
                    },
                    "programId": {
                        "type": "integer",
                        "description": "The ID of the program this invoice is for."
                    },
                    "programTitle": {
                        "type": "string",
                        "description": "The title of the program."
                    },
                    "programType": {
                        "type": "string",
                        "description": "The type of the program (e.g., Course, Workshop)."
                    },
                    "programThumbnailUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true,
                        "description": "URL of the program's thumbnail image."
                    },
                    "virtualAccountNumber": {
                        "type": "string",
                        "nullable": true,
                        "description": "The virtual account number for payment."
                    },
                    "amountIdr": {
                        "type": "integer",
                        "description": "The total amount due in IDR."
                    },
                    "paymentDueDatetime": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true,
                        "description": "The date and time when the payment is due."
                    },
                    "status": {
                        "type": "string",
                        "enum": ["Verified", "Unverified", "Expired"],
                        "description": "The current status of the invoice."
                    },
                    "payment": {
                        "$ref": "#/components/schemas/Payment",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "deletedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                }
            },
            "CompletedModule": {
                "type": "object",
                "properties": {
                    "courseModuleId": {
                        "type": "integer"
                    },
                    "completedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "EnrollmentDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Enrollment"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "completedModules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CompletedModule"
                                }
                            }
                        }
                    }
                ]
            },
            "Certificate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "enrollmentId": {
                        "type": "integer"
                    },
                    "programId": {
                        "type": "integer"
                    },
                    "programTitle": {
                        "type": "string"
                    },
                    "programType": {
                        "type": "string"
                    },
                    "programThumbnailUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "title": {
                        "type": "string"
                    },
                    "credential": {
                        "type": "string"
                    },
                    "documentUrl": {
                        "type": "string",
                        "format": "uri",
                        "nullable": true
                    },
                    "issuedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "Discussion": {
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "example": 1 },
                    "adminUserId": { "type": "integer", "example": 1 },
                    "title": {
                        "type": "string",
                        "example": "General Discussion about Web Development"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-10-16T10:00:00.000Z"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-10-16T10:00:00.000Z"
                    }
                }
            },
            "RegisterRequestBody": {
                "type": "object",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "format": "password"
                    }
                },
                "example": {
                    "fullName": "John Doe",
                    "email": "johndoe@mail.com",
                    "password": "Weakpassword321"
                }
            },
            "LoginRequestBody": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "format": "password"
                    }
                },
                "example": {
                    "email": "johndoe@mail.com",
                    "password": "Weakpassword321"
                }
            },
            "ForgotPasswordRequestBody": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    }
                },
                "example": {
                    "email": "johndoe@mail.com"
                }
            },
            "ResetPasswordRequestBody": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "integer"
                    },
                    "token": {
                        "type": "string",
                        "description": "The 64-character hexadecimal reset token"
                    },
                    "newPassword": {
                        "type": "string",
                        "format": "password"
                    },
                    "confirmNewPassword": {
                        "type": "string",
                        "format": "password"
                    }
                },
                "example": {
                    "userId": 1,
                    "token": "c0ae8bc1c8ad1eea5d936c622a6850b984459d5bfd999552dc4cbecb54d02efe",
                    "newPassword": "NewStrongPassword123!",
                    "confirmNewPassword": "NewStrongPassword123!"
                }
            },
            "UserUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "minLength": 8,
                        "maxLength": 72
                    }
                },
                "example": {
                    "fullName": "John Doe Updated",
                    "email": "johndoe.new@mail.com"
                }
            },
            "FeedbackRequestBody": {
                "type": "object",
                "properties": {
                    "fullName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "fullName": "John Doe",
                    "email": "johndoe@mail.com",
                    "message": "It would be helpful if you guys can add quizzes :)"
                }
            },
            "FeedbackResponseRequestBody": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "message": "Thank you for your feedback! We will take it into consideration."
                }
            },
            "ProgramCreateRequestBody": {
                "type": "object",
                "properties": {
                    "title": { "type": "string" },
                    "description": { "type": "string" },
                    "availableDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["Course", "Seminar", "Workshop", "Competition"]
                    },
                    "priceIdr": { "type": "integer", "minimum": 0 },
                    "isOnline": { "type": "boolean" },
                    "videoConferenceUrl": {
                        "type": "string",
                        "format": "uri"
                    },
                    "locationAddress": { "type": "string" },
                    "contestRoomUrl": { "type": "string", "format": "uri" },
                    "speakerNames": {
                        "type": "array",
                        "items": { "type": "string", "maxLength": 60 },
                        "maxItems": 10
                    },
                    "facilitatorNames": {
                        "type": "array",
                        "items": { "type": "string", "maxLength": 60 },
                        "maxItems": 10
                    },
                    "hostName": { "type": "string" },
                    "totalPrize": { "type": "integer", "minimum": 0 }
                },
                "example": {
                    "title": "New Workshop Program",
                    "description": "This is a new workshop program.",
                    "availableDate": "2025-11-11T00:00:00.000Z",
                    "type": "Workshop",
                    "priceIdr": 250000,
                    "isOnline": true,
                    "videoConferenceUrl": "http://zoom.us/new",
                    "facilitatorNames": ["Dr. Smith"]
                }
            },
            "ProgramUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "title": { "type": "string" },
                    "description": { "type": "string" },
                    "availableDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["Course", "Seminar", "Workshop", "Competition"]
                    },
                    "priceIdr": { "type": "integer", "minimum": 0 },
                    "isOnline": { "type": "boolean" },
                    "videoConferenceUrl": {
                        "type": "string",
                        "format": "uri"
                    },
                    "locationAddress": { "type": "string" },
                    "contestRoomUrl": { "type": "string", "format": "uri" },
                    "speakerNames": {
                        "type": "array",
                        "items": { "type": "string", "maxLength": 60 },
                        "maxItems": 10
                    },
                    "facilitatorNames": {
                        "type": "array",
                        "items": { "type": "string", "maxLength": 60 },
                        "maxItems": 10
                    },
                    "hostName": { "type": "string" },
                    "totalPrize": { "type": "integer", "minimum": 0 }
                },
                "example": {
                    "type": "Seminar",
                    "speakerNames": ["Dr. Strange", "Wong"]
                }
            },
            "ModuleCreateRequestBody": {
                "type": "object",
                "properties": {
                    "numberCode": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "youtubeUrl": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "required": ["numberCode", "youtubeUrl"],
                "example": {
                    "numberCode": 21,
                    "youtubeUrl": "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
                }
            },
            "ModuleUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "numberCode": {
                        "type": "integer",
                        "minimum": 1
                    },
                    "youtubeUrl": {
                        "type": "string",
                        "format": "uri"
                    }
                },
                "example": {
                    "numberCode": 100
                }
            },
            "EnrollmentCreateRequestBody": {
                "type": "object",
                "properties": {
                    "programId": {
                        "type": "integer"
                    }
                },
                "required": ["programId"],
                "example": {
                    "programId": 1
                }
            },
            "EnrollmentUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["Completed"]
                    }
                },
                "required": ["status"],
                "example": {
                    "status": "Completed"
                }
            },
            "CompletedModuleRequestBody": {
                "type": "object",
                "properties": {
                    "courseModuleId": {
                        "type": "integer"
                    }
                },
                "required": ["courseModuleId"],
                "example": {
                    "courseModuleId": 1
                }
            },
            "CertificateCreateRequestBody": {
                "type": "object",
                "properties": {
                    "enrollmentId": {
                        "type": "integer",
                        "description": "The ID of the completed enrollment."
                    },
                    "title": {
                        "type": "string",
                        "description": "A custom title for the certificate. If not provided, a default will be generated."
                    },
                    "issuedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date the certificate is issued. Defaults to the current date if not provided."
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The optional date the certificate expires. Must be after issuedAt."
                    }
                },
                "required": ["enrollmentId"],
                "example": {
                    "enrollmentId": 1,
                    "title": "Certificate of Advanced Web Development",
                    "issuedAt": "2025-12-25T00:00:00.000Z",
                    "expiredAt": "2027-12-25T00:00:00.000Z"
                }
            },
            "CertificateUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "A new title for the certificate."
                    },
                    "expiredAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "A new expiration date for the certificate. Must be after the original issue date."
                    }
                },
                "minProperties": 1,
                "example": {
                    "title": "Certificate of Expertise in Advanced Backend Development",
                    "expiredAt": "2028-12-31T00:00:00.000Z"
                }
            },
            "DiscussionCreateRequestBody": {
                "type": "object",
                "properties": {
                    "title": { "type": "string" }
                },
                "required": ["title"],
                "example": {
                    "title": "New Discussion on DevOps"
                }
            },
            "DiscussionUpdateRequestBody": {
                "type": "object",
                "properties": {
                    "title": { "type": "string" }
                },
                "required": ["title"],
                "example": {
                    "title": "Updated: Discussion on Advanced Web Topics"
                }
            },
            "CompletedModuleSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "progressPercentage": {
                                "type": "string",
                                "description": "The new progress percentage of the enrollment after completing the module."
                            },
                            "completedModule": {
                                "$ref": "#/components/schemas/CompletedModule"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully completed a module.",
                    "data": {
                        "progressPercentage": "5.00",
                        "completedModule": {
                            "id": 1,
                            "enrollmentId": 1,
                            "courseModuleId": 1,
                            "completedAt": "2025-10-05T10:00:00.000Z",
                            "createdAt": "2025-10-05T10:00:00.000Z",
                            "updatedAt": "2025-10-05T10:00:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "FailedResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true,
                        "example": null
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true,
                        "items": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "context": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "value": {
                                            "type": [
                                                "string",
                                                "integer",
                                                "object"
                                            ],
                                            "nullable": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "RegisterSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully registered a new user account.",
                    "data": {
                        "user": {
                            "id": 1,
                            "email": "johndoe@mail.com",
                            "fullName": "John Doe",
                            "memberLevel": "Basic",
                            "role": "User",
                            "pictureUrl": null,
                            "createdAt": "2025-06-06T08:08:00.080Z",
                            "updatedAt": "2025-06-06T08:08:00.080Z"
                        }
                    },
                    "errors": null
                }
            },
            "LoginSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "accessToken": {
                                "type": "string"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully logged in.",
                    "data": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywidXNlcm5hbWUiOiJBbGV4YSIsImlhdCI6MTczODg0NTcxMiwiZXhwIjoxNzM5NDUwNTEyfQ.jaOEpQcfyzZs7sDWz6cG7k3oShiFQkj0wkhEabaScOA"
                    },
                    "errors": null
                }
            },
            "LogoutSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully logged out.",
                    "data": null,
                    "errors": null
                }
            },
            "ForgotPasswordSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully sent password reset link to your email.",
                    "data": null,
                    "errors": null
                }
            },
            "ResetPasswordSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully reset your password.",
                    "data": null,
                    "errors": null
                }
            },
            "UserListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "users": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all user data.",
                    "data": {
                        "users": [
                            {
                                "id": 1,
                                "email": "admin@example.com",
                                "fullName": "Admin User",
                                "memberLevel": "Premium",
                                "role": "Admin",
                                "pictureUrl": "https://example.com/pic.jpg",
                                "createdAt": "2025-09-21T12:00:00.000Z",
                                "updatedAt": "2025-09-21T12:00:00.000Z"
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "UserSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "user": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved user data.",
                    "data": {
                        "user": {
                            "id": 1,
                            "email": "johndoe@mail.com",
                            "fullName": "John Doe",
                            "memberLevel": "Basic",
                            "role": "User",
                            "pictureUrl": null,
                            "createdAt": "2025-06-06T08:08:00.080Z",
                            "updatedAt": "2025-06-06T08:08:00.080Z"
                        }
                    },
                    "errors": null
                }
            },
            "UserDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted a user account.",
                    "data": null,
                    "errors": null
                }
            },
            "ProfilePhotoUploadSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "pictureUrl": {
                                "type": "string",
                                "format": "uri"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully uploaded a profile picture.",
                    "data": {
                        "pictureUrl": "http://localhost:9000/sim-ilc/images/1-photo-1758632370659.webp"
                    },
                    "errors": null
                }
            },
            "FeedbackListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "feedbacks": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Feedback"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all feedbacks.",
                    "data": {
                        "feedbacks": [
                            {
                                "id": 1,
                                "email": "user@example.com",
                                "fullName": "John Doe",
                                "message": "This is a feedback message.",
                                "createdAt": "2025-09-21T12:00:00.000Z",
                                "updatedAt": "2025-09-21T12:00:00.000Z",
                                "responses": [
                                    {
                                        "id": 1,
                                        "adminUserId": 1,
                                        "message": "This is a response from the admin.",
                                        "createdAt": "2025-09-21T13:00:00.000Z",
                                        "updatedAt": "2025-09-21T13:00:00.000Z"
                                    }
                                ]
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "FeedbackSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "feedback": {
                                "$ref": "#/components/schemas/Feedback"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved a feedback details.",
                    "data": {
                        "feedback": {
                            "id": 1,
                            "email": "Salsabila.Nasyiah@yahoo.co.id",
                            "fullName": "Zalindra Lestari",
                            "message": "Contigo possimus dignissimos tamdiu.",
                            "createdAt": "2025-03-12T03:13:10.990Z",
                            "updatedAt": "2025-07-19T16:11:02.483Z",
                            "responses": [
                                {
                                    "id": 1,
                                    "adminUserId": 2,
                                    "message": "Considero tenus acidus acquiro demitto illo corporis degero. Optio tumultus vulgaris valde creptio vilicus fuga tertius ubi.",
                                    "createdAt": "2025-03-20T20:45:47.619Z",
                                    "updatedAt": "2025-05-18T11:04:15.275Z"
                                }
                            ]
                        }
                    },
                    "errors": null
                }
            },
            "FeedbackSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "feedback": {
                                "$ref": "#/components/schemas/Feedback"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a feedback.",
                    "data": {
                        "feedback": {
                            "id": 101,
                            "fullName": "John Doe",
                            "email": "johndoe@mail.com",
                            "message": "It would be helpful if you guys can add quizzes :)",
                            "updatedAt": "2025-09-27T14:12:22.993Z",
                            "createdAt": "2025-09-27T14:12:22.993Z"
                        }
                    },
                    "errors": null
                }
            },
            "FeedbackResponseSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "feedbackResponse": {
                                "$ref": "#/components/schemas/FeedbackResponse"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a feedback response.",
                    "data": {
                        "feedbackResponse": {
                            "id": 1,
                            "feedbackId": 1,
                            "adminUserId": 1,
                            "message": "Thank you for your feedback! We will take it into consideration.",
                            "createdAt": "2025-09-28T12:00:00.000Z",
                            "updatedAt": "2025-09-28T12:00:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "ProgramListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "programs": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Program"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all programs.",
                    "data": {
                        "programs": [
                            {
                                "id": 1,
                                "title": "Introduction to Backend Development",
                                "description": "Learn the fundamentals of backend development.",
                                "thumbnailUrl": "https://example.com/thumb.jpg",
                                "availableDate": "2025-10-01T00:00:00.000Z",
                                "type": "Course",
                                "priceIdr": 500000,
                                "createdAt": "2025-09-28T12:00:00.000Z",
                                "updatedAt": "2025-09-28T12:00:00.000Z"
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "ProgramDetailsSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "program": {
                                "$ref": "#/components/schemas/ProgramDetails"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved a program details.",
                    "data": {
                        "program": {
                            "id": 1,
                            "title": "Introduction to Web Development",
                            "description": "Learn the fundamentals of modern web development.",
                            "thumbnailUrl": "https://example.com/thumb1.jpg",
                            "availableDate": "2025-10-01T00:00:00.000Z",
                            "type": "Course",
                            "priceIdr": 500000,
                            "createdAt": "2025-09-29T12:00:00.000Z",
                            "updatedAt": "2025-09-29T12:00:00.000Z",
                            "details": {
                                "totalModules": 2
                            }
                        }
                    },
                    "errors": null
                }
            },
            "ProgramCreateSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "program": {
                                "$ref": "#/components/schemas/ProgramDetails"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a program.",
                    "data": {
                        "program": {
                            "id": 5,
                            "title": "New Course Program",
                            "description": "This is a new course program.",
                            "availableDate": "2025-10-10T00:00:00.000Z",
                            "type": "Course",
                            "priceIdr": 150000,
                            "details": {}
                        }
                    },
                    "errors": null
                }
            },
            "ProgramUpdateSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "program": {
                                "$ref": "#/components/schemas/ProgramDetails"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully updated a program.",
                    "data": {
                        "program": {
                            "id": 1,
                            "title": "Updated Course Title",
                            "description": "This is an updated course.",
                            "availableDate": "2025-12-01T00:00:00.000Z",
                            "type": "Course",
                            "priceIdr": 200000,
                            "details": {
                                "totalModules": 5
                            }
                        }
                    },
                    "errors": null
                }
            },
            "ProgramDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted a program.",
                    "data": null,
                    "errors": null
                }
            },
            "ProgramThumbnailUploadSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "thumbnailUrl": {
                                "type": "string",
                                "format": "uri"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully uploaded a program thumbnail.",
                    "data": {
                        "thumbnailUrl": "http://localhost:9000/sim-ilc/images/programs/1-thumbnail-1758632370659.webp"
                    },
                    "errors": null
                }
            },
            "ModuleListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all modules.",
                    "data": {
                        "modules": [
                            {
                                "id": 1,
                                "numberCode": 1,
                                "materialUrl": "https://example.com/module1.pdf",
                                "youtubeUrl": "https://youtube.com/watch?v=12345",
                                "createdAt": "2025-10-01T10:00:00.000Z",
                                "updatedAt": "2025-10-01T10:00:00.000Z"
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "ModuleSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "module": {
                                "$ref": "#/components/schemas/Module"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved module details.",
                    "data": {
                        "module": {
                            "id": 1,
                            "numberCode": 1,
                            "materialUrl": "https://example.com/module1.pdf",
                            "youtubeUrl": "https://youtube.com/watch?v=12345",
                            "createdAt": "2025-10-01T10:00:00.000Z",
                            "updatedAt": "2025-10-01T10:00:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "ModuleCreateSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "module": {
                                "$ref": "#/components/schemas/Module"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a module.",
                    "data": {
                        "module": {
                            "id": 21,
                            "numberCode": 21,
                            "materialUrl": null,
                            "youtubeUrl": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
                            "updatedAt": "2025-10-02T02:30:00.000Z",
                            "createdAt": "2025-10-02T02:30:00.000Z",
                            "deletedAt": null
                        }
                    },
                    "errors": null
                }
            },
            "ModuleUpdateSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "module": {
                                "$ref": "#/components/schemas/Module"
                            }
                        }
                    },
                    "errors": { "type": "array", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully updated a module.",
                    "data": {
                        "module": {
                            "id": 1,
                            "numberCode": 100,
                            "materialUrl": "https://example.com/module1.pdf",
                            "youtubeUrl": "https://youtube.com/watch?v=12345",
                            "createdAt": "2025-10-01T10:00:00.000Z",
                            "updatedAt": "2025-10-02T03:00:00.000Z",
                            "deletedAt": null
                        }
                    },
                    "errors": null
                }
            },
            "ModuleDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted a module.",
                    "data": null,
                    "errors": null
                }
            },
            "EnrollmentListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "enrollments": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all program enrollments.",
                    "data": {
                        "enrollments": [
                            {
                                "id": 1,
                                "userId": 1,
                                "programId": 1,
                                "programTitle": "Introduction to Backend",
                                "programType": "Course",
                                "programThumbnailUrl": "https://example.com/thumb.jpg",
                                "progressPercentage": "50.00",
                                "status": "In Progress",
                                "completedAt": null,
                                "createdAt": "2025-10-01T12:00:00.000Z",
                                "updatedAt": "2025-10-01T12:00:00.000Z"
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "EnrollmentDetailsSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "enrollment": {
                                "$ref": "#/components/schemas/EnrollmentDetails"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved program enrollment details.",
                    "data": {
                        "enrollment": {
                            "id": 1,
                            "userId": 1,
                            "programId": 1,
                            "programTitle": "Introduction to Backend",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg",
                            "progressPercentage": "50.00",
                            "status": "In Progress",
                            "completedAt": null,
                            "createdAt": "2025-10-01T12:00:00.000Z",
                            "updatedAt": "2025-10-01T12:00:00.000Z",
                            "completedModules": [
                                {
                                    "courseModuleId": 1,
                                    "completedAt": "2025-10-02T10:00:00.000Z"
                                }
                            ]
                        }
                    },
                    "errors": null
                }
            },
            "EnrollmentCreateSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "enrollment": {
                                "$ref": "#/components/schemas/Enrollment"
                            },
                            "invoice": {
                                "$ref": "#/components/schemas/Invoice"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created an enrollment. Please complete the payment to access the contents.",
                    "data": {
                        "enrollment": {
                            "id": 1,
                            "userId": 1,
                            "programId": 1,
                            "programTitle": "Introduction to Backend",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg",
                            "progressPercentage": "0.00",
                            "status": "Unpaid",
                            "completedAt": null,
                            "createdAt": "2025-10-04T08:30:00.000Z",
                            "updatedAt": "2025-10-04T08:30:00.000Z"
                        },
                        "invoice": {
                            "id": 1,
                            "enrollmentId": 1,
                            "virtualAccountNumber": "1234567890123456",
                            "amountIdr": 500000,
                            "paymentDueDatetime": "2025-10-04T09:30:00.000Z",
                            "status": "Unverified",
                            "createdAt": "2025-10-04T08:30:00.000Z",
                            "updatedAt": "2025-10-04T08:30:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "EnrollmentUpdateSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "enrollment": {
                                "$ref": "#/components/schemas/Enrollment"
                            }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully updated program enrollment details.",
                    "data": {
                        "enrollment": {
                            "id": 2,
                            "userId": 1,
                            "programId": 2,
                            "programTitle": "Web Development Workshop",
                            "programType": "Workshop",
                            "programThumbnailUrl": "https://example.com/thumb2.jpg",
                            "progressPercentage": "100.00",
                            "status": "Completed",
                            "completedAt": "2025-10-04T16:30:00.000Z",
                            "createdAt": "2025-10-04T10:00:00.000Z",
                            "updatedAt": "2025-10-04T16:30:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "EnrollmentDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted an enrollment.",
                    "data": null,
                    "errors": null
                }
            },
            "InvoiceListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "invoices": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Invoice"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all invoices.",
                    "data": {
                        "invoices": [
                            {
                                "id": 1,
                                "userId": 1,
                                "programId": 1,
                                "programTitle": "Introduction to Backend Development",
                                "programType": "Course",
                                "programThumbnailUrl": "https://example.com/thumb.jpg",
                                "virtualAccountNumber": "1234567890123456",
                                "amountIdr": 150000,
                                "paymentDueDatetime": "2025-10-07T12:00:00.000Z",
                                "status": "Verified",
                                "payment": {
                                    "id": 1,
                                    "amountPaidIdr": 150000,
                                    "createdAt": "2025-10-06T11:30:00.000Z",
                                    "updatedAt": "2025-10-06T11:30:00.000Z"
                                },
                                "createdAt": "2025-10-06T10:00:00.000Z",
                                "updatedAt": "2025-10-06T11:30:00.000Z",
                                "deletedAt": null
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "InvoiceDetailsSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "invoice": {
                                "$ref": "#/components/schemas/Invoice"
                            }
                        }
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved an invoice details.",
                    "data": {
                        "invoice": {
                            "id": 1,
                            "userId": 1,
                            "programId": 1,
                            "programTitle": "Introduction to Backend Development",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg",
                            "virtualAccountNumber": "1234567890123456",
                            "amountIdr": 150000,
                            "paymentDueDatetime": "2025-10-07T12:00:00.000Z",
                            "status": "Verified",
                            "payment": {
                                "id": 1,
                                "amountPaidIdr": 150000,
                                "createdAt": "2025-10-06T11:30:00.000Z",
                                "updatedAt": "2025-10-06T11:30:00.000Z"
                            },
                            "createdAt": "2025-10-06T10:00:00.000Z",
                            "updatedAt": "2025-10-06T11:30:00.000Z",
                            "deletedAt": null
                        }
                    },
                    "errors": null
                }
            },
            "InvoiceDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted an invoice.",
                    "data": null,
                    "errors": null
                }
            },
            "PaymentSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "payment": {
                                "$ref": "#/components/schemas/Payment"
                            }
                        }
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a payment.",
                    "data": {
                        "payment": {
                            "id": 1,
                            "invoiceId": 1,
                            "amountPaidIdr": 150000,
                            "createdAt": "2025-10-06T11:30:00.000Z",
                            "updatedAt": "2025-10-06T11:30:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "CertificateListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "certificates": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Certificate"
                                }
                            }
                        }
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved all certificates.",
                    "data": {
                        "certificates": [
                            {
                                "id": 1,
                                "userId": 1,
                                "enrollmentId": 1,
                                "programId": 1,
                                "programTitle": "Introduction to Backend Development",
                                "programType": "Course",
                                "programThumbnailUrl": "https://example.com/thumb.jpg",
                                "title": "Introduction to Backend Development Certificate of Completion",
                                "credential": "CRS0001-U0001",
                                "documentUrl": "https://example.com/certificate.pdf",
                                "issuedAt": "2025-10-10T10:00:00.000Z",
                                "expiredAt": null,
                                "createdAt": "2025-10-10T10:00:00.000Z",
                                "updatedAt": "2025-10-10T10:00:00.000Z"
                            }
                        ]
                    },
                    "pagination": {
                        "currentRecords": 1,
                        "totalRecords": 1,
                        "currentPage": 1,
                        "totalPages": 1,
                        "nextPage": null,
                        "prevPage": null
                    },
                    "errors": null
                }
            },
            "CertificateDetailsSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "certificate": {
                                "$ref": "#/components/schemas/Certificate"
                            }
                        }
                    },
                    "errors": {
                        "type": "object",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully retrieved a certificate.",
                    "data": {
                        "certificate": {
                            "id": 1,
                            "userId": 1,
                            "enrollmentId": 1,
                            "programId": 1,
                            "programTitle": "Introduction to Backend Development",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg",
                            "title": "Introduction to Backend Development Certificate of Completion",
                            "credential": "CRS0001-U0001",
                            "documentUrl": "https://example.com/certificate.pdf",
                            "issuedAt": "2025-10-10T10:00:00.000Z",
                            "expiredAt": null,
                            "createdAt": "2025-10-10T10:00:00.000Z",
                            "updatedAt": "2025-10-10T10:00:00.000Z"
                        }
                    },
                    "errors": null
                }
            },
            "CertificateCreateSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "certificate": {
                                "$ref": "#/components/schemas/Certificate"
                            }
                        }
                    },
                    "errors": { "type": "object", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 201,
                    "message": "Successfully created a certificate.",
                    "data": {
                        "certificate": {
                            "id": 1,
                            "enrollmentId": 1,
                            "userId": 1,
                            "title": "Introduction to Backend Development Certificate of Completion",
                            "credential": "CRS0001-U0001",
                            "documentUrl": "https://fake-s3.com/new-cert.pdf",
                            "issuedAt": "2025-10-10T10:00:00.000Z",
                            "expiredAt": null,
                            "updatedAt": "2025-10-10T10:00:00.000Z",
                            "createdAt": "2025-10-10T10:00:00.000Z",
                            "programId": 1,
                            "programTitle": "Introduction to Backend Development",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg"
                        }
                    },
                    "errors": null
                }
            },
            "CertificateUpdateSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "certificate": {
                                "$ref": "#/components/schemas/Certificate"
                            }
                        }
                    },
                    "errors": { "type": "object", "nullable": true }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully updated a certificate.",
                    "data": {
                        "certificate": {
                            "id": 1,
                            "userId": 1,
                            "enrollmentId": 1,
                            "title": "Certificate of Expertise in Advanced Backend Development",
                            "credential": "CRS0001-U0001",
                            "documentUrl": "https://fake-s3.com/updated-cert.pdf",
                            "issuedAt": "2025-10-10T10:00:00.000Z",
                            "expiredAt": "2028-12-31T00:00:00.000Z",
                            "createdAt": "2025-10-10T10:00:00.000Z",
                            "updatedAt": "2025-10-11T10:00:00.000Z",
                            "programId": 1,
                            "programTitle": "Introduction to Backend Development",
                            "programType": "Course",
                            "programThumbnailUrl": "https://example.com/thumb.jpg"
                        }
                    },
                    "errors": null
                }
            },
            "CertificateDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    },
                    "statusCode": {
                        "type": "integer"
                    },
                    "message": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "nullable": true
                    },
                    "errors": {
                        "type": "array",
                        "nullable": true
                    }
                },
                "example": {
                    "success": true,
                    "statusCode": 200,
                    "message": "Successfully deleted a certificate.",
                    "data": null,
                    "errors": null
                }
            },
            "DiscussionListSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "discussions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        }
                    },
                    "pagination": { "$ref": "#/components/schemas/Pagination" },
                    "errors": { "type": "object", "nullable": true }
                }
            },
            "DiscussionSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "discussion": {
                                "$ref": "#/components/schemas/Discussion"
                            }
                        }
                    },
                    "errors": { "type": "object", "nullable": true }
                }
            },
            "DiscussionCreateSuccessResponse201": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "discussion": {
                                "$ref": "#/components/schemas/Discussion"
                            }
                        }
                    },
                    "errors": { "type": "object", "nullable": true }
                }
            },
            "DiscussionUpdateSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": {
                        "type": "object",
                        "properties": {
                            "discussion": {
                                "$ref": "#/components/schemas/Discussion"
                            }
                        }
                    },
                    "errors": { "type": "object", "nullable": true }
                }
            },
            "DiscussionDeleteSuccessResponse200": {
                "type": "object",
                "properties": {
                    "success": { "type": "boolean" },
                    "statusCode": { "type": "integer" },
                    "message": { "type": "string" },
                    "data": { "type": "object", "nullable": true },
                    "errors": { "type": "object", "nullable": true }
                }
            }
        },
        "examples": {
            "BadRequest": {
                "summary": "Validation Error",
                "value": {
                    "success": false,
                    "statusCode": 400,
                    "data": null,
                    "message": "Validation error.",
                    "errors": [
                        {
                            "message": "\"email\" must be a valid email",
                            "context": {
                                "key": "email",
                                "value": "invalid-email"
                            }
                        }
                    ]
                }
            },
            "Unauthorized": {
                "summary": "Unauthorized",
                "value": {
                    "success": false,
                    "statusCode": 401,
                    "message": "Unauthorized.",
                    "data": null,
                    "errors": [
                        {
                            "message": "Invalid or expired token.",
                            "context": {
                                "key": "request.headers.authorization",
                                "value": null
                            }
                        }
                    ]
                }
            },
            "Forbidden": {
                "summary": "Forbidden",
                "value": {
                    "success": false,
                    "statusCode": 403,
                    "data": null,
                    "message": "Forbidden.",
                    "errors": [
                        {
                            "message": "You do not have the necessary permissions to access this resource.",
                            "context": {
                                "key": "role",
                                "value": "User"
                            }
                        }
                    ]
                }
            },
            "NotFound": {
                "summary": "Not Found",
                "value": {
                    "success": false,
                    "statusCode": 404,
                    "data": null,
                    "message": "Resource not found.",
                    "errors": [
                        {
                            "message": "User with \"userId\" does not exist",
                            "context": {
                                "key": "userId",
                                "value": 9999
                            }
                        }
                    ]
                }
            },
            "Conflict": {
                "summary": "Conflict",
                "value": {
                    "success": false,
                    "statusCode": 409,
                    "data": null,
                    "message": "Resource conflict.",
                    "errors": [
                        {
                            "message": "email is already registered.",
                            "context": {
                                "key": "email",
                                "value": "johndoe@mail.com"
                            }
                        }
                    ]
                }
            },
            "PayloadTooLarge": {
                "summary": "Payload Too Large",
                "value": {
                    "success": false,
                    "statusCode": 413,
                    "data": null,
                    "message": "Content Too Large.",
                    "errors": {
                        "message": "File too large",
                        "context": {
                            "key": "photo",
                            "value": null
                        }
                    }
                }
            },
            "UnsupportedMediaType": {
                "summary": "Unsupported Media Type",
                "value": {
                    "success": false,
                    "statusCode": 415,
                    "data": null,
                    "message": "Unsupported Media Type.",
                    "errors": [
                        {
                            "message": "Content-Type headers must be application/json",
                            "context": {
                                "key": "Content-Type",
                                "value": "multipart/form-data; boundary=--------------------------006985592206444069082103"
                            }
                        }
                    ]
                }
            },
            "TooManyRequests": {
                "summary": "Too Many Requests",
                "value": {
                    "success": false,
                    "statusCode": 429,
                    "message": "Too many requests.",
                    "data": null,
                    "errors": null
                }
            },
            "InternalServerError": {
                "summary": "Internal Server Error",
                "value": {
                    "success": false,
                    "statusCode": 500,
                    "data": null,
                    "message": "There is an issue with the server.",
                    "errors": null
                }
            }
        }
    }
}
